"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[14],{9285:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-3b800308",path:"/guide/javascript/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE.html",title:"原型和原型链",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"前言",slug:"前言",children:[]},{level:2,title:"prototype 属性",slug:"prototype-属性",children:[]},{level:2,title:"__proto__ 属性",slug:"proto-属性",children:[]},{level:2,title:"constructor 属性",slug:"constructor-属性",children:[]},{level:2,title:"扩展",slug:"扩展",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],filePathRelative:"guide/javascript/原型和原型链.md",git:{updatedTime:1639564078e3,contributors:[{name:"Lynn",email:"Linmy0221@gmail.com",commits:1}]}}},1204:(n,s,a)=>{a.r(s),a.d(s,{default:()=>A});var e=a(6252),t=a(6248),l=a(8695),o=a(1084);const c=(0,e._)("h1",{id:"原型和原型链",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#原型和原型链","aria-hidden":"true"},"#"),(0,e.Uk)(" 原型和原型链")],-1),_=(0,e._)("h2",{id:"前言",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),(0,e.Uk)(" 前言")],-1),p=(0,e._)("p",null,"首先，以下三点需熟读并背诵全文：",-1),r=(0,e._)("ol",null,[(0,e._)("li",null,[(0,e.Uk)("js中 "),(0,e._)("strong",null,"对象"),(0,e.Uk)(" 和 "),(0,e._)("strong",null,"函数"),(0,e.Uk)(" 的关系，"),(0,e._)("strong",null,[(0,e.Uk)("！！！"),(0,e._)("code",null,"函数是对象的一种"),(0,e.Uk)("！！！")])]),(0,e._)("li",null,[(0,e.Uk)("函数和构造函数的区别，任何函数都可以作为构造函数，但是并不能将任意函数叫做构造函数，只有当一个函数通过 "),(0,e._)("code",null,"new"),(0,e.Uk)(" 关键字调用的时候才可以成为构造函数。")]),(0,e._)("li",null,[(0,e.Uk)("要弄清楚原型和原型链，必须搞清楚 "),(0,e._)("code",null,"__proto__"),(0,e.Uk)(", "),(0,e._)("code",null,"prototype"),(0,e.Uk)(", "),(0,e._)("code",null,"constructor"),(0,e.Uk)("。 "),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("code",null,"__proto__"),(0,e.Uk)("， "),(0,e._)("code",null,"constructor"),(0,e.Uk)(" 是属性，是对象独有的。")]),(0,e._)("li",null,[(0,e._)("code",null,"prototype"),(0,e.Uk)(" 属性是函数独有的")]),(0,e._)("li",null,[(0,e.Uk)("函数是对象的一种，同样也有属性"),(0,e._)("code",null,"__proto__"),(0,e.Uk)(", "),(0,e._)("code",null,"constructor")])])])],-1),u=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// 定义一个函数，现在它只是一个普通函数"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"Parent"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"// 通过 new 关键字调用它，创建一个 Parent 构造函数的实例"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// Parent 现在不是普通函数，而是一个构造函数"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" p1 "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Parent"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br")])],-1),i=(0,e._)("h2",{id:"prototype-属性",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#prototype-属性","aria-hidden":"true"},"#"),(0,e.Uk)(" prototype 属性")],-1),k=(0,e._)("p",null,[(0,e._)("img",{src:t,alt:"protorype"})],-1),d=(0,e._)("p",null,"从图中可以看到它从一个函数只向另一个对象，代表这个对象是这个函数的原型对象，这个对象也是当前函数所创建的实例的原型对象。",-1),U=(0,e._)("p",null,[(0,e._)("code",null,"prototype"),(0,e.Uk)(" 设计之初就是为了实现继承，让由特定函数创建的所有实例共享属性和方法、有了 "),(0,e._)("code",null,"prototype"),(0,e.Uk)(" 我们不需要为每一个实例创建重复的属性方法，而是将属性方法创建再构造函数的原型对象上。")],-1),b=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// 添加属性"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token class-name"},"Parent"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("prototype"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("name "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"aaa"'),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"// 添加方法"),(0,e.Uk)("\nParent"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("protorype"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function-variable function"},"sayhello"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  console"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"hello!"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br")])],-1),m=(0,e._)("h2",{id:"proto-属性",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#proto-属性","aria-hidden":"true"},"#"),(0,e.Uk)(),(0,e._)("code",null,"__proto__"),(0,e.Uk)(" 属性")],-1),g=(0,e._)("p",null,[(0,e._)("img",{src:l,alt:"proto"})],-1),h=(0,e._)("p",null,[(0,e._)("code",null,"__proto__"),(0,e.Uk)(" 属性是对象（包括对象）独有的。从图中可以看到 "),(0,e._)("code",null,"__proto__"),(0,e.Uk)(" 属性是从一个对象指向另一个对象。")],-1),f=(0,e._)("p",null,[(0,e.Uk)("构造函数的实例就是通过 "),(0,e._)("code",null,"__proto__"),(0,e.Uk)(" 属性和构造函数的原型对象上的属性和方法联系上的。")],-1),y=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e.Uk)("p1"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("__prototype__ "),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Parent"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("prototype"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// true"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br")])],-1),j=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("函数的隐式对象指向 "),(0,e._)("code",null,"Function.prototype")]),(0,e._)("li",null,[(0,e.Uk)("构造函数原型对象的隐式原型指向了 "),(0,e._)("code",null,"Object.prototype")]),(0,e._)("li",null,[(0,e.Uk)("万物继承自 "),(0,e._)("code",null,"Object.prototype")]),(0,e._)("li",null,[(0,e._)("code",null,"Object.prototype"),(0,e.Uk)(" 的 "),(0,e._)("code",null,"__proto__"),(0,e.Uk)(" 是 "),(0,e._)("code",null,"null"),(0,e.Uk)("，所以当访问对象中一个不存在的属性时，返回 "),(0,e._)("code",null,"undefined")])],-1),v=(0,e._)("h2",{id:"constructor-属性",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#constructor-属性","aria-hidden":"true"},"#"),(0,e.Uk)(" constructor 属性")],-1),P=(0,e._)("p",null,[(0,e._)("img",{src:o,alt:"constructor"})],-1),x=(0,e._)("p",null,[(0,e.Uk)("原型对象 "),(0,e._)("code",null,"protorype"),(0,e.Uk)(" 有一个默认的 "),(0,e._)("code",null,"constructor"),(0,e.Uk)(" 属性，用于记录实例时由哪个构造函数创建。从图中看 "),(0,e._)("code",null,"prototype"),(0,e.Uk)(" 对象指向的就是该对象的构造函数。")],-1),O=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token class-name"},"Person"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("prototype"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("constructor "),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(" Person\n"),(0,e._)("span",{class:"token comment"},"// true"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"// 实例对象通过 __proto__ 访问其构造函数的原型对象获得 constructor 属性"),(0,e.Uk)("\nconsole"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("p1"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("constructor"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// f Parent(){}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br")])],-1),w=(0,e._)("h2",{id:"扩展",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#扩展","aria-hidden":"true"},"#"),(0,e.Uk)(" 扩展")],-1),E=(0,e._)("ol",null,[(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("code",null,"this"),(0,e.Uk)("的值：无论在哪里找到方法，在一个对象还是在原型中，在一个方法调用中，"),(0,e._)("code",null,"this"),(0,e.Uk)(" 始终是点符号 "),(0,e._)("code",null,"."),(0,e.Uk)(" 前面的对象。")])]),(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)("在现代变成中，只有一种情况允许修改原生原型。那就是"),(0,e._)("code",null,"ployfilling"),(0,e.Uk)("。")])])],-1),S=(0,e._)("p",null,[(0,e._)("code",null,"polyfilling"),(0,e.Uk)(" 是一个术语，表示某个方法在 "),(0,e._)("code",null,"javascript"),(0,e.Uk)(" 规范中已存在。但是特定的 "),(0,e._)("code",null,"javascript"),(0,e.Uk)(" 引擎尚不支持该方法，那么我们可以通过手动实现它，并用以填充内建原型。")],-1),C=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// 判断是否存在这个方法"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"!"),(0,e._)("span",{class:"token class-name"},"String"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("prototype"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("repeat"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token comment"},"// 若不存在，就在 prototype 中添加它"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token class-name"},"String"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("prototype"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function-variable function"},"repeat"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// ...实现代码"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br")])],-1),z=(0,e._)("ol",{start:"3"},[(0,e._)("li",null,[(0,e._)("code",null,"__proto__"),(0,e.Uk)(" 被认为是过时且不推荐使用的，这里的不推荐使用是指 "),(0,e._)("code",null,"javascript"),(0,e.Uk)(" 规范中规定， "),(0,e._)("code",null,"__proto__"),(0,e.Uk)(" 必须仅在浏览器环境下才能得到支持。")])],-1),B=(0,e._)("p",null,"现代的方法有：",-1),F=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("code",null,"Object.create(proto, [descriptors])"),(0,e.Uk)(" —— 利用给定的 "),(0,e._)("code",null,"__proto__"),(0,e.Uk)(" 作为 "),(0,e._)("code",null,"Prototype"),(0,e.Uk)(" 和可选的属性描述来创建一空对象。")]),(0,e._)("li",null,[(0,e._)("code",null,"Object.getPrototypeOf(obj)"),(0,e.Uk)(" —— 返回对象 "),(0,e._)("code",null,"obj"),(0,e.Uk)(" 的 "),(0,e._)("code",null,"Prototype"),(0,e.Uk)("。")]),(0,e._)("li",null,[(0,e._)("code",null,"Object.setPrototypeOf(obj, proto)"),(0,e.Uk)(" —— 将对象 "),(0,e._)("code",null,"obj"),(0,e.Uk)(" 的 "),(0,e._)("code",null,"Prototype"),(0,e.Uk)(" 设置为 "),(0,e._)("code",null,"proto"),(0,e.Uk)("。")])],-1),J=(0,e._)("ol",{start:"4"},[(0,e._)("li",null,[(0,e._)("code",null,"Object.create"),(0,e.Uk)(" 有一个可选的第二参数：属性描述器。我们可以在此处为新对象提供额外的属性。")])],-1),L=(0,e._)("p",null,[(0,e.Uk)("我们可以使用 "),(0,e._)("code",null,"Object.create"),(0,e.Uk)(" 来实现比复制 "),(0,e._)("code",null,"for..in"),(0,e.Uk)(" 循环中的属性更强大的对象克隆方式：")],-1),W=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" clone "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" Object"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"create"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("Object"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"getPrototypeOf"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("obj"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" Object"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"getOwnPropertyDescriptors"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("obj"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br")])],-1),D=(0,e._)("h2",{id:"参考",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#参考","aria-hidden":"true"},"#"),(0,e.Uk)(" 参考")],-1),Z={href:"https://segmentfault.com/a/1190000021232132",target:"_blank",rel:"noopener noreferrer"},H=(0,e.Uk)("一张图搞定JS原型&原型链 : https://segmentfault.com/a/1190000021232132"),N={href:"https://juejin.cn/post/6844903989088092174",target:"_blank",rel:"noopener noreferrer"},R=(0,e.Uk)("轻松理解JS 原型原型链 : https://juejin.cn/post/6844903989088092174"),T={href:"https://zh.javascript.info/",target:"_blank",rel:"noopener noreferrer"},Y=(0,e.Uk)("现代 JavaScript 教程 : https://zh.javascript.info/"),q={},A=(0,a(3744).Z)(q,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[c,_,p,r,u,i,k,d,U,b,m,g,h,f,y,j,v,P,x,O,w,E,S,C,z,B,F,J,L,W,D,(0,e._)("p",null,[(0,e._)("a",Z,[H,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",N,[R,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",T,[Y,(0,e.Wm)(a)])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},8695:(n,s,a)=>{n.exports=a.p+"assets/img/__proto__.d786438c.png"},1084:(n,s,a)=>{n.exports=a.p+"assets/img/constructor.a85faaf1.png"},6248:(n,s,a)=>{n.exports=a.p+"assets/img/prototype.02a23f81.png"}}]);