"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[361],{9677:(s,a,n)=>{n.r(a),n.d(a,{data:()=>e});const e={key:"v-32fd2c18",path:"/guide/other/shell.html",title:"shell",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"进入和退出",slug:"进入和退出",children:[]},{level:2,title:"echo 命令",slug:"echo-命令",children:[{level:3,title:"参数",slug:"参数",children:[]}]},{level:2,title:"命令的组合",slug:"命令的组合",children:[]},{level:2,title:"type 命令",slug:"type-命令",children:[{level:3,title:"参数",slug:"参数-1",children:[]}]},{level:2,title:"declare 命令",slug:"declare-命令",children:[]},{level:2,title:"readonly 命令",slug:"readonly-命令",children:[]},{level:2,title:"let 命令",slug:"let-命令",children:[]},{level:2,title:"字符串操作",slug:"字符串操作",children:[{level:3,title:"字符串长度",slug:"字符串长度",children:[]},{level:3,title:"子字符串",slug:"子字符串",children:[]},{level:3,title:"改变大小写",slug:"改变大小写",children:[]},{level:3,title:"搜索和替换",slug:"搜索和替换",children:[]}]},{level:2,title:"运算",slug:"运算",children:[{level:3,title:"算术运算",slug:"算术运算",children:[]},{level:3,title:"数值的进制",slug:"数值的进制",children:[]},{level:3,title:"位运算",slug:"位运算",children:[]},{level:3,title:"逻辑运算",slug:"逻辑运算",children:[]},{level:3,title:"赋值运算",slug:"赋值运算",children:[]},{level:3,title:"求值运算",slug:"求值运算",children:[]}]},{level:2,title:"expr 命令",slug:"expr-命令",children:[]}],filePathRelative:"guide/other/shell.md",git:{updatedTime:1643792386e3,contributors:[{name:"Lynn",email:"Linmy0221@gmail.com",commits:1}]}}},7656:(s,a,n)=>{n.r(a),n.d(a,{default:()=>p});const e=(0,n(6252).uE)('<h1 id="shell" tabindex="-1"><a class="header-anchor" href="#shell" aria-hidden="true">#</a> shell</h1><h2 id="进入和退出" tabindex="-1"><a class="header-anchor" href="#进入和退出" aria-hidden="true">#</a> 进入和退出</h2><p><code>bash</code> 命令启动 bash</p><p><code>exit</code> 退出 bash（<code>Ctrl + d</code>）</p><p><code>pwd</code> 显示当前所在的目录</p><p><code>bash --version</code>, <code>echo $BASH_VERSION</code> 查看 bash 版本</p><h2 id="echo-命令" tabindex="-1"><a class="header-anchor" href="#echo-命令" aria-hidden="true">#</a> <code>echo</code> 命令</h2><p><code>echo</code> 命令的作用是在屏幕输出一行文本，可以将该命令的参数原样输出。</p><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h3><ul><li><p><code>-n</code> 取消末尾的回车符</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> a<span class="token punctuation">;</span><span class="token builtin class-name">echo</span> b\na\nb\n\n$ <span class="token builtin class-name">echo</span> -n a<span class="token punctuation">;</span><span class="token builtin class-name">echo</span> b\nab\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p><code>-e</code> 解释引号里的特殊字符</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token string">&quot;Hello<span class="token entity" title="\\n">\\n</span>World&quot;</span>\nHello<span class="token punctuation">\\</span>nWorld\n\n$ <span class="token builtin class-name">echo</span> -e <span class="token string">&quot;Hello<span class="token entity" title="\\n">\\n</span>World&quot;</span>\nHello\nWorld\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><h2 id="命令的组合" tabindex="-1"><a class="header-anchor" href="#命令的组合" aria-hidden="true">#</a> 命令的组合</h2><ul><li><p><code>;</code> 第二个命令总是接着第一个命令执行，不管第一个命令执行成功或失败</p></li><li><p><code>&amp;&amp;</code> 第一个命令运行成功，才会继续执行第二个命令</p></li><li><p><code>||</code> 第一个命令运行失败，才会继续执行第二个命令</p></li></ul><h2 id="type-命令" tabindex="-1"><a class="header-anchor" href="#type-命令" aria-hidden="true">#</a> <code>type</code> 命令</h2><p><code>type</code> 命令用来判断命令的来源（内部命令，外部程序）</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token builtin class-name">type</span> <span class="token builtin class-name">echo</span>\n<span class="token builtin class-name">echo</span> is a shell <span class="token builtin class-name">builtin</span>\n$ <span class="token builtin class-name">type</span> <span class="token function">ls</span>\n<span class="token function">ls</span> is hashed<span class="token punctuation">(</span>/bin/ls<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="参数-1" tabindex="-1"><a class="header-anchor" href="#参数-1" aria-hidden="true">#</a> 参数</h3><ul><li><p><code>-a</code> 查看一个命令的所有定义</p></li><li><p><code>-t</code> 可以返回一个命令的类型: 别名(alias)，关键词(keyword)，函数(function)，内置命令(builtin)，文件(file)</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token builtin class-name">type</span> -a <span class="token builtin class-name">echo</span>\n<span class="token builtin class-name">echo</span> is shell <span class="token builtin class-name">builtin</span>\n<span class="token builtin class-name">echo</span> is /usr/bin/echo\n<span class="token builtin class-name">echo</span> is /bin/echo\n\n$ <span class="token builtin class-name">type</span> -t <span class="token function">bash</span>\n<span class="token function">file</span>\n$ <span class="token builtin class-name">type</span> -t <span class="token keyword">if</span>\nkeyword\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul><h2 id="declare-命令" tabindex="-1"><a class="header-anchor" href="#declare-命令" aria-hidden="true">#</a> <code>declare</code> 命令</h2><p><code>declare</code> 命令可以声明一些特殊类型的变量，为变量设置一些限制，比如声明只读类型的变量和整数类型的变量 <code>declare OPTION VARIABLE=VALUE</code></p><p>参数:</p><ul><li><code>-a</code> : 声明数组变量</li><li><code>-f</code> : 输出所有函数定义</li><li><code>-F</code> : 输出所有函数名</li><li><code>-i</code> : 声明整数变量</li><li><code>-l</code> : 声明变量为小写字母</li><li><code>-p</code> : 查看变量信息</li><li><code>-r</code> : 声明只读变量</li><li><code>-u</code> : 声明变量为大写字母</li><li><code>-x</code> : 该变量输出为环境变量</li></ul><h2 id="readonly-命令" tabindex="-1"><a class="header-anchor" href="#readonly-命令" aria-hidden="true">#</a> <code>readonly</code> 命令</h2><p><code>readonly</code>命令等同于 <code>declare -r</code>，用来声明只读变量，不能改变变量值，也不能 <code>unset</code> 变量</p><p>参数:</p><ul><li><code>-f</code> : 声明的变量为函数名</li><li><code>-p</code> : 打印出所有的只读变量</li><li><code>-a</code> : 声明的变量为数组</li></ul><h2 id="let-命令" tabindex="-1"><a class="header-anchor" href="#let-命令" aria-hidden="true">#</a> <code>let</code> 命令</h2><p><code>let</code> 命令声明变量时，可以直接执行算术表达式</p><p><code>let</code> 命令的参数表达式如果包含空格，就需要使用引号</p><p><code>let</code> 可以同时对多个变量赋值，赋值表达式之间要使用空格分隔</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token builtin class-name">let</span> <span class="token assign-left variable">foo</span><span class="token operator">=</span><span class="token number">1</span>+2\n$ <span class="token builtin class-name">echo</span> <span class="token variable">$foo</span>\n<span class="token number">3</span>\n\n$ <span class="token builtin class-name">let</span> <span class="token string">&quot;foo = 1 + 2&quot;</span>\n\n$ <span class="token builtin class-name">let</span> <span class="token string">&quot;v1 = 1&quot;</span> <span class="token string">&quot;v2 = v1++&quot;</span>\n$ <span class="token builtin class-name">echo</span> <span class="token variable">$v1</span>,<span class="token variable">$v2</span>\n<span class="token number">2,1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="字符串操作" tabindex="-1"><a class="header-anchor" href="#字符串操作" aria-hidden="true">#</a> 字符串操作</h2><h3 id="字符串长度" tabindex="-1"><a class="header-anchor" href="#字符串长度" aria-hidden="true">#</a> 字符串长度</h3><p><code>${#varname}</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token assign-left variable">mypath</span><span class="token operator">=</span>/home/cam/book/long.file.com\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${<span class="token operator">#</span>mypath}</span>\n<span class="token number">29</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="子字符串" tabindex="-1"><a class="header-anchor" href="#子字符串" aria-hidden="true">#</a> 子字符串</h3><p><code>${varname:offset:length}</code></p><p>这种语法不能直接操作字符串，只能通过变量来读取字符串，并且不会改变原始字符串。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token assign-left variable">count</span><span class="token operator">=</span>frogfootman\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${count<span class="token operator">:</span>4<span class="token operator">:</span>4}</span>\nfoot\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${count<span class="token operator">:</span>4}</span>\nfootman\n\n$ <span class="token assign-left variable">foo</span><span class="token operator">=</span><span class="token string">&quot;This string is long.&quot;</span>\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${foo <span class="token operator">:-</span>5}</span>\nlong.\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${foo<span class="token operator">:</span> -5<span class="token operator">:</span>2}</span>\nlo\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${foo<span class="token operator">:</span> -5<span class="token operator">:-</span>2}</span>\nlon\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="改变大小写" tabindex="-1"><a class="header-anchor" href="#改变大小写" aria-hidden="true">#</a> 改变大小写</h3><ul><li>转为大写 <code>${varname^^}</code></li><li>转为小写 <code>${varname,,}</code></li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token assign-left variable">foo</span><span class="token operator">=</span>heLLo\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${foo<span class="token operator">^^</span>}</span>\nHELLO\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${foo<span class="token operator">,,</span>}</span>\nhello\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="搜索和替换" tabindex="-1"><a class="header-anchor" href="#搜索和替换" aria-hidden="true">#</a> 搜索和替换</h3><ol><li><p>字符串头部的模式匹配</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 删除最短匹配（非贪婪匹配）</span>\n<span class="token variable">${varname<span class="token operator">#</span>pattern}</span>\n\n<span class="token comment"># 删除最长匹配（贪婪匹配）</span>\n<span class="token variable">${varname<span class="token operator">##</span>pattern}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果匹配成功，就删除匹配的部分，返回剩下的部分。原始变量不会发生变化；如果匹配不成功，则返回原始字符串。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token assign-left variable">mypath</span><span class="token operator">=</span>/home/cam/book/long.file.name\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${mypath<span class="token operator">#</span><span class="token operator">/</span>*<span class="token operator">/</span>}</span>\ncam/book/long.file.name\n\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${mypath<span class="token operator">##</span><span class="token operator">/</span>*<span class="token operator">/</span>}</span>\nlong.file.name\n\n$ <span class="token assign-left variable">phone</span><span class="token operator">=</span><span class="token string">&quot;555-456-1414&quot;</span>\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${phone<span class="token operator">#</span>444}</span>\n<span class="token number">555</span>-456-1414\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>如果要将头部匹配的部分，替换成其他内容，采用下面的写法</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token variable">${varname<span class="token operator">/</span><span class="token operator">#</span>pattern<span class="token operator">/</span>string}</span>\n\n$ <span class="token assign-left variable">foo</span><span class="token operator">=</span>JPG.JPG\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${foo<span class="token operator">/</span><span class="token operator">#</span>JPG<span class="token operator">/</span>jpg}</span>\njpg.JPG\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>字符串尾部的模式匹配</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 删除最短匹配（非贪婪匹配）</span>\n<span class="token variable">${varname<span class="token operator">%</span>pattern}</span>\n\n<span class="token comment"># 删除最长匹配（贪婪匹配）</span>\n<span class="token variable">${varname<span class="token operator">%%</span>pattern}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面两种语法会删除变量字符串结尾的匹配部分（将其替换为空），返回剩下的部分；如果不匹配，则返回原始字符串</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token assign-left variable">path</span><span class="token operator">=</span>/home/cam/book/long.file.name\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${path<span class="token operator">%</span><span class="token operator">/</span>*}</span>\n/home/cam/book\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${path<span class="token operator">%%</span>.*}</span>\n/home/cam/book/long\n\n$ <span class="token assign-left variable">file</span><span class="token operator">=</span>foo.png\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${file<span class="token operator">%</span>.png}</span>.jpg\nfoo.jpg\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如果要将尾部匹配的部分，替换成其他内容，采用下面的方法</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token variable">${varname<span class="token operator">/</span><span class="token operator">%</span>pattern<span class="token operator">/</span>string}</span>\n\n$ <span class="token assign-left variable">foo</span><span class="token operator">=</span>JPG.JPG\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${foo<span class="token operator">/</span><span class="token operator">%</span>JPG<span class="token operator">/</span>jpg}</span>\nJPG.jpg\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>字符串任意位置的模式匹配</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 最长匹配（贪婪匹配）的那部分被 string 替换，但仅替换第一个匹配</span>\n<span class="token variable">${varname<span class="token operator">/</span>pattern<span class="token operator">/</span>string}</span>\n\n<span class="token comment"># 最长匹配（贪婪匹配）的那部分被 string 替换，所有匹配都替换</span>\n<span class="token variable">${varname<span class="token operator">/</span><span class="token operator">/</span>pattern<span class="token operator">/</span>string}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>注意，上面两种语法都是最长匹配（贪婪匹配）下的替换</strong></p><p>如果省略了 <code>stirng</code> 的部分，那么相当于匹配的部分替换成空字符串，即删除匹配的部分</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token assign-left variable">path</span><span class="token operator">=</span>/home/cam/foo/foo.name\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${path<span class="token operator">/</span>.*<span class="token operator">/</span>}</span>\n/home/cam/foo/foo\n\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${path<span class="token operator">/</span>foo<span class="token operator">/</span>bar}</span>\n/home/cam/bar/foo.name\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${path<span class="token operator">/</span><span class="token operator">/</span>foo<span class="token operator">/</span>bar}</span>\n/home/cam/bar/bar.name\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ol><h2 id="运算" tabindex="-1"><a class="header-anchor" href="#运算" aria-hidden="true">#</a> 运算</h2><h3 id="算术运算" tabindex="-1"><a class="header-anchor" href="#算术运算" aria-hidden="true">#</a> 算术运算</h3><p><code>((...))</code> 语法可以进行整数的算术运算，自动忽略内部的空格。</p><p><code>((...))</code> 支持的算术运算：<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>++</code>, <code>--</code>, <code>**</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token variable"><span class="token punctuation">((</span>foo <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">))</span></span>\n$ <span class="token builtin class-name">echo</span> <span class="token variable">$foo</span>\n<span class="token number">10</span>\n\n<span class="token comment"># 这个语法不返回值，如果要读取算术运算的结果，在前面加上 $ 符号</span>\n$ <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token variable">))</span></span>\n<span class="token number">4</span>\n\n<span class="token comment"># 这个语法只能进行整数计算</span>\n$ <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span><span class="token number">1.5</span><span class="token operator">+</span><span class="token number">2</span><span class="token variable">))</span></span>\nbash:语法错误\n\n<span class="token comment"># ((...))里面使用字符串，bash会认为那是一个变量名。如果不存在同名变量，bash就会将其作为空值</span>\n$ <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span> &quot;hello&quot; <span class="token operator">+</span> <span class="token number">2</span> <span class="token variable">))</span></span>\n<span class="token number">2</span>\n<span class="token comment"># 将空值当作 0</span>\n$ <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span>&quot;hello&quot;<span class="token operator">*</span><span class="token number">2</span><span class="token variable">))</span></span>\n<span class="token number">0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="数值的进制" tabindex="-1"><a class="header-anchor" href="#数值的进制" aria-hidden="true">#</a> 数值的进制</h3><ul><li><code>0number</code> : 八进制</li><li><code>0xnumber</code> : 十六进制</li><li><code>base#number</code> : base进制</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span><span class="token number">0xff</span><span class="token variable">))</span></span>\n<span class="token number">256</span>\n$ <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span><span class="token number">2</span>#<span class="token number">1111</span><span class="token variable">))</span></span>\n<span class="token number">15</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算" aria-hidden="true">#</a> 位运算</h3><p><code>$((...))</code> 支持以下的二进制运算</p><ul><li><code>&lt;&lt;</code> : 左移运算</li><li><code>&gt;&gt;</code> : 右移运算</li><li><code>&amp;</code> : 与运算</li><li><code>|</code> : 或运算</li><li><code>^</code> : 异或运算</li><li><code>~</code> : 非运算</li></ul><h3 id="逻辑运算" tabindex="-1"><a class="header-anchor" href="#逻辑运算" aria-hidden="true">#</a> 逻辑运算</h3><p><code>$((...))</code> 支持以下的逻辑运算符</p><ul><li><code>&lt;</code> : 小于</li><li><code>&gt;</code> : 大于</li><li><code>&lt;=</code> : 小于等于</li><li><code>&gt;=</code> : 大于等于</li><li><code>==</code> : 相等</li><li><code>!=</code> : 不相等</li><li><code>&amp;&amp;</code> : 逻辑与</li><li><code>||</code> : 逻辑或</li><li><code>!</code> : 逻辑非</li><li><code>expr1 ? expr2 : expr3</code> : 三元条件运算符</li></ul><h3 id="赋值运算" tabindex="-1"><a class="header-anchor" href="#赋值运算" aria-hidden="true">#</a> 赋值运算</h3><p><code>$((...))</code> 可以执行赋值运算</p><ul><li><code>=</code></li><li><code>+=</code></li><li><code>-=</code></li><li><code>*=</code></li><li><code>/=</code></li><li><code>%=</code></li><li><code>&lt;&lt;=</code></li><li><code>&gt;&gt;=</code></li><li><code>%=</code></li><li><code>|=</code></li><li><code>^=</code></li></ul><h3 id="求值运算" tabindex="-1"><a class="header-anchor" href="#求值运算" aria-hidden="true">#</a> 求值运算</h3><p><code>,</code> 在 <code>(())</code> 内部时求值运算符，执行前后两个表达式，并返回后一个表达式的值。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span>foo <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token variable">))</span></span>\n<span class="token number">12</span>\n$ <span class="token builtin class-name">echo</span> <span class="token variable">$foo</span>\n<span class="token number">3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="expr-命令" tabindex="-1"><a class="header-anchor" href="#expr-命令" aria-hidden="true">#</a> expr 命令</h2><p><code>expr</code> 命令支持算术运算，可以不使用 <code>((...))</code> 语法<br><code>expr</code> 命令支持变量替换<br><code>expr</code> 命令不支持非整数参数</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">expr</span> <span class="token number">2</span>+3\n<span class="token number">5</span>\n\n$ <span class="token assign-left variable">foo</span><span class="token operator">=</span><span class="token number">3</span>\n$ <span class="token function">expr</span> <span class="token variable">$foo</span>+2\n<span class="token number">5</span>\n\n$ <span class="token function">expr</span> <span class="token number">1.5</span>+2\nexpr:非整数参数\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',66),l={},p=(0,n(3744).Z)(l,[["render",function(s,a){return e}]])},3744:(s,a)=>{a.Z=(s,a)=>{const n=s.__vccOpts||s;for(const[s,e]of a)n[s]=e;return n}}}]);