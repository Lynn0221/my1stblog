"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[977],{7843:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-3d7b0413",path:"/guide/javascript/EventLoop%E6%9C%BA%E5%88%B6.html",title:"EventLoop机制",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"任务队列",slug:"任务队列",children:[]},{level:2,title:"宏任务微任务",slug:"宏任务微任务",children:[]},{level:2,title:"事件循环",slug:"事件循环",children:[{level:3,title:"浏览器的事件循环",slug:"浏览器的事件循环",children:[]}]},{level:2,title:"参考",slug:"参考",children:[]}],filePathRelative:"guide/javascript/EventLoop机制.md",git:{updatedTime:1639474753e3,contributors:[{name:"Lynn",email:"Linmy0221@gmail.com",commits:1}]}}},1760:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var t=a(6252);const p=(0,t.uE)('<h1 id="eventloop机制" tabindex="-1"><a class="header-anchor" href="#eventloop机制" aria-hidden="true">#</a> EventLoop机制</h1><p><strong>JS是单线程语言，而浏览器是多线程</strong></p><blockquote><p>单线程和多线程最简单的区别就是： 单线程<em>同一时间</em>只能做一件事情； 多线程<em>同一时间</em>能做多件事情。</p></blockquote><h2 id="任务队列" tabindex="-1"><a class="header-anchor" href="#任务队列" aria-hidden="true">#</a> 任务队列</h2><p>JS将所有执行任务分为了同步任务和异步任务。</p><p>其实，每个人物都是在做两件事：发起调用 和 得到结果。</p><p>同步任务和异步任务最大的区别就是，同步任务在发起调用后立即得到结果。这是因为同步任务和异步任务的执行机制不同导致的。</p><p>同步任务按照代码顺序和调用顺序，依次进入调用栈（Call Stack）并执行，执行结束后从调用栈移除。<br> 异步任务也一样进入调用栈，然后发起调用，解释器会将其相应回调任务放入任务队列，之后从调用栈移除。当主线程清空后，即所有同步任务结束后，解释器会读取任务队列，并将已完成的异步任务加入调用栈中并执行。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;https://github.com/Lynn0221/&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">json</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上述代码：</p><ol><li>执行<code>console.log(1)</code>，打印1</li><li>调用fetch()发起请求，此时<code>.then()</code>已经在任务队列，fetch()移除调用栈</li><li>执行<code>console.log(2)</code>，打印2</li><li>将任务队列里<code>.then()</code>依次进入调用栈执行</li></ol><h2 id="宏任务微任务" tabindex="-1"><a class="header-anchor" href="#宏任务微任务" aria-hidden="true">#</a> 宏任务微任务</h2><p>任务队列遵循FIFO（先进先出），因此异步任务会按照进入队列的顺序依次执行。<br> 但在一些场景下，如果只按照进入队列的顺序依次执行的话，也会出问题。如果队列进入一个1小时的定时器，接着在进入一个请求接口函数，而如果根据进入队列的顺序执行的话，请求接口函数需要一个小时后才会响应数据。<br> 因此浏览器就会将异步任务分为宏任务和微任务，然后按照 <strong>事件循环</strong> 的机制去执行。 哪些事件是宏任务？哪些是微任务？</p><p>宏任务：整体代码，UI交互式事件，IO，setTimeout，setInterval，setImmediate，requestAnimationFrame</p><p>微任务：process.nextTick，Object.observe，MutationObserve，Promise.then catch finally</p><h2 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环" aria-hidden="true">#</a> 事件循环</h2><h3 id="浏览器的事件循环" tabindex="-1"><a class="header-anchor" href="#浏览器的事件循环" aria-hidden="true">#</a> 浏览器的事件循环</h3><p>事件循环的流程如下：</p><ol><li>当我们第一次执行的时候，解释器会将整体代码script放入宏任务队列中，因此事件循环时从第一个宏任务开始的</li><li>从宏任务队列中，按照入队顺序，找到第一个执行的宏任务，放入调用栈，开始执行</li><li>执行完该宏任务下所有同步任务后，该宏任务被推出宏任务队列，然后微任务队列开始按照入队顺序依次执行其中的微任务，直至微任务队列清空</li><li>当微任务队列清空后，一个事件循环结束</li><li>接着从宏任务队列，找到下一个执行的宏任务，开始第二个事件循环，以此类推...</li></ol><p>根据代码具体看一下执行过程：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 为了说明和延迟时间无关，将延迟设为 0</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a c f d e b</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>首先，整体代码 script 被推入宏任务队列汇总，并开始执行宏任务。</p><p>按照代码顺序，将<code>console.log(&quot;a&quot;)</code>该函数上下文被推入调用栈，执行完后，即移除调用栈。 <strong>-&gt; 输出 a</strong></p><p>接下来，将<code>setTimeout()</code>函数上下文也进入调用栈中，<code>setTimeout</code>是异步任务，将其<code>callback</code>函数推入红任务队列中，然后该函数被移除调用栈。</p><p>接着<code>Promise</code>语句被放入调用栈，执行<code>console.log(&quot;c&quot;)</code> 和 <code>resolve()</code>。<code>.then()</code>是微任务，将其依次放入微任务队列。将<code>Promise</code>移除调用栈。 <strong>-&gt; 输出 c</strong></p><p>接着再将<code>console.log(&quot;f&quot;)</code>放入调用栈并执行 <strong>-&gt; 输出 f</strong></p><p>此时<code>script</code>宏任务执行结束，被推出宏任务队列。</p><p>检测到微任务队列里还有任务没有完成，依次将其放入调用栈执行.<code>.then(()=&gt;{ console.log(&quot;d&quot;) })</code> <strong>-&gt; 输出 d</strong>，移除调用栈。第二个<code>then()</code>函数放入调用栈执行 <strong>-&gt; 输出 e</strong>，移除调用栈。</p><p>到此，微任务队列也已经清空了，第一个事件循环已经结束。</p><p>接着来到第二个事件循环,<code>setTimeout()</code>的<code>callback</code><strong>-&gt; 输出 b</strong></p><p>执行结束后，它也被移除宏任务队列和调用栈。此时，微任务队列里也没有任务，因此第二个事件循环结束。宏任务队列也没有任务，所有代码执行结束。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',32),e={href:"https://segmentfault.com/a/1190000022060158",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("Event Loop机制到底是个啥"),c={href:"https://www.jianshu.com/p/58e11dc2e2e7",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Uk)("搞懂EventLoop机制"),u={},i=(0,a(3744).Z)(u,[["render",function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("p",null,[(0,t._)("a",e,[o,(0,t.Wm)(a)])]),(0,t._)("p",null,[(0,t._)("a",c,[l,(0,t.Wm)(a)])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);